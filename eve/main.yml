version: "0.2"

branches:
  documentation/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge

models:
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      mode: full
      method: clobber
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &k8s_setup
      name: setup k8s env
      command: eve/scripts/setup-k8s.sh
      haltOnFailure: true
      env:
        CI_KUBECONFIG: '%(secret:openstack_cluster_conf)s'
        NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
        KUBECONFIG: /root/.kube/config
        CLUSTER_IP: '%(secret:openstack_cluster_ip)s'
  - ShellCommand: &k8s_cleanup
      name: Cleanup
      command: kubectl delete namespace ${HELM_NAMESPACE} --wait
      alwaysRun: true
      warnOnFailure: true
      sigtermTime: 1200
      env:
        KUBECONFIG: /root/.kube/config
        ZENKO_HELM_RELEASE: 'zenko-offline'
        HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
  - Upload: &upload_artifacts
      source: tests/artifacts
      urls:
        - "*.tar.gz"
  - ShellCommand: &private_registry_login
      name: Private Registry Login
      command: >
        docker login
        -u '%(secret:private_registry_username)s'
        -p '%(secret:private_registry_password)s'
        '%(secret:private_registry_url)s'
  - ShellCommand: &helm_lint
      name: Lint charts
      command: >
        helm lint kubernetes/zenko/ &&
        helm lint kubernetes/zenko/charts/*
      haltOnFailure: true
  - ShellCommand: &dump_logs
      name: Dump zenko logs
      command: make -e dump-logs
      workdir: build/tests
      alwaysRun: true
      warnOnFailure: true
      env:
        HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
  - ShellCommand: &start-mocks
      name: Start external service mocks
      command: make -e install-mocks
      workdir: build/tests
      haltOnFailure: true
      env:
        HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
  - env: &secrets_env # contains values used for test config
      ARTIFACTS_USER: '%(secret:artifacts_user)s'
      ARTIFACTS_PASSWORD: '%(secret:artifacts_password)s'
      ARTIFACTS_URL: '%(secret:artifacts_url)s'

      AWS_ENDPOINT: https://s3.amazonaws.com
      AWS_ACCESS_KEY: '%(secret:aws_s3_backend_access_key)s'
      AWS_SECRET_KEY: '%(secret:aws_s3_backend_secret_key)s'
      AWS_ACCESS_KEY_2: '%(secret:aws_s3_backend_access_key_2)s'
      AWS_SECRET_KEY_2: '%(secret:aws_s3_backend_secret_key_2)s'

      GCP_ACCESS_KEY: '%(secret:aws_gcp_backend_access_key)s'
      GCP_SECRET_KEY: '%(secret:aws_gcp_backend_secret_key)s'
      GCP_ACCESS_KEY_2: '%(secret:aws_gcp_backend_access_key_2)s'
      GCP_SECRET_KEY_2: '%(secret:aws_gcp_backend_secret_key_2)s'

      AZURE_ACCOUNT_NAME: '%(secret:azure_backend_account_name)s'
      AZURE_BACKEND_ENDPOINT: '%(secret:azure_backend_endpoint)s'
      AZURE_SECRET_KEY: '%(secret:azure_backend_access_key)s'
      AZURE_ACCOUNT_NAME_2: '%(secret:azure_backend_account_name_2)s'
      AZURE_BACKEND_ENDPOINT_2: '%(secret:azure_backend_endpoint_2)s'
      AZURE_SECRET_KEY_2: '%(secret:azure_backend_access_key_2)s'
      ZENKO_ACCESS_KEY: HEYIMAACCESSKEY
      ZENKO_SECRET_KEY: loOkAtMEImASecRetKEy123=
      AWS_BACKEND_SOURCE_LOCATION: awsbackend
      AWS_BACKEND_DESTINATION_LOCATION: awsbackendmismatch
      GCP_BACKEND_DESTINATION_LOCATION: gcpbackendmismatch
      AZURE_BACKEND_DESTINATION_LOCATION: azurebackendmismatch
      LOCATION_QUOTA_BACKEND: quotabackend
      GCP_BACKEND_SERVICE_KEY: '%(secret:gcp_backend_service_key)s'
      GCP_BACKEND_SERVICE_EMAIL: '%(secret:gcp_backend_service_email)s'
      COSBENCH_NIGHTLY_SERVICE_ACCOUNT: '%(secret:cosbenchNightlyServiceAccount)s'
      COSBENCH_SPREADSHEET_ID: '%(secret:cosbenchSpreadsheetID)s'

      AWS_BUCKET_NAME: ci-zenko-aws-target-bucket
      AWS_BUCKET_NAME_2: ci-zenko-aws-target-bucket-2
      AWS_CRR_BUCKET_NAME: ci-zenko-aws-crr-target-bucket
      AWS_CRR_SRC_BUCKET_NAME: 'ci-zenko-aws-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'

      AZURE_BUCKET_NAME: ci-zenko-azure-target-bucket
      AZURE_BUCKET_NAME_2: ci-zenko-azure-target-bucket-2
      AZURE_CRR_BUCKET_NAME: ci-zenko-azure-crr-target-bucket
      AZURE_CRR_SRC_BUCKET_NAME: 'ci-zenko-azure-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'

      GCP_BUCKET_NAME: ci-zenko-gcp-target-bucket
      GCP_BUCKET_NAME_2: ci-zenko-gcp-target-bucket-2
      GCP_CRR_BUCKET_NAME: ci-zenko-gcp-crr-target-bucket
      GCP_CRR_MPU_BUCKET_NAME: ci-zenko-gcp-crr-mpu-bucket
      GCP_CRR_SRC_BUCKET_NAME: 'ci-zenko-gcp-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'
      GCP_MPU_BUCKET_NAME: ci-zenko-gcp-mpu-bucket
      GCP_MPU_BUCKET_NAME_2: ci-zenko-gcp-mpu-bucket-2
      MULTI_CRR_SRC_BUCKET_NAME: 'ci-zenko-multi-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'
      TRANSIENT_SRC_BUCKET_NAME: 'ci-zenko-transient-src-bucket-%(prop:bootstrap)s-${STAGE}'

  - env: &mock_env
      AZURE_ACCOUNT_NAME: devstoreaccount1
      AZURE_BACKEND_ENDPOINT: http://azure-mock/devstoreaccount1
      AZURE_SECRET_KEY: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==

      AWS_ENDPOINT: http://aws-mock
      AWS_ACCESS_KEY: accessKey1
      AWS_SECRET_KEY: verySecretKey1
      AWS_ACCESS_KEY_2: accessKey2
      AWS_SECRET_KEY_2: verySecretKey2
      VERIFY_CERTIFICATES: "false"

  - env: &docker_env # contains values for build test images
      E2E_DOCKER_IMAGE_NAME: '%(secret:private_registry_url)s/zenko/zenko-e2e'
      BACKBEAT_DOCKER_IMAGE_NAME: '%(secret:private_registry_url)s/zenko/backbeat-e2e'
      IMAGE_REGISTRY: '%(secret:private_registry_url)s'
      TAG_OVERRIDE: '%(prop:commit_short_revision)s'

  - env: &k8s_env # containes values for running helm and kubectl
      ZENKO_HELM_RELEASE: 'zenko-test'
      HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
      TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
      INSTALL_TIMEOUT: "600"

  - env: &global_env # contains all env values
      <<: [*secrets_env, *docker_env, *k8s_env]

stages:
  pre-merge:
    worker:
      type: local
    steps:
    - TriggerStages:
        name: trigger all the tests
        stage_names:
        - build-doc
        - python-tests
        - node-tests-01
        - node-tests-02

    - TriggerStages:
        name: testrail report
        stage_names:
          - testrail-upload
        alwaysRun: true

  build-doc:
    worker:
      type: kube_pod
      path: eve/workers/doc-builder.yaml
      images:
        doc-builder:
          context: '.'
          dockerfile: docs/Dockerfile
    steps:
    - Git: *git_pull
    - ShellCommand:
        name: 'Build doc'
        haltOnFailure: true
        command: |-
          tox --workdir /tmp/tox -e docs -- html BUILDDIR="%(prop:builddir)s/build/artifacts"
          # Building the latex twice to catch up the reference
          tox --workdir /tmp/tox -e docs -- latexpdf BUILDDIR="%(prop:builddir)s/build/artifacts"
          tox --workdir /tmp/tox -e docs -- latexpdf BUILDDIR="%(prop:builddir)s/build/artifacts"

    - Upload:
        name: Upload documentation
        source: 'artifacts'
        urls:
          - "html/index.html"
          - "latex/*.pdf"

  online-zenko: &online-zenko
    worker: &kube_cluster
      type: kube_pod
      path: eve/workers/zenko.yaml
      vars:
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - ShellCommand:
        name: Setup and run e2e
        command: |
          . ../eve/scripts/only-docs.sh
          make -e VERBOSE=1 test
        workdir: build/tests
        env:
          <<: [*secrets_env, *docker_env]
          KUBECONFIG: /root/.kube/config
          ZENKO_HELM_RELEASE: 'zenko-offline'
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          INSTALL_TIMEOUT: "600"
          ARTIFACTS_NAME: '%(prop:artifacts_name)s'
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *k8s_cleanup

  python-tests: *online-zenko
  node-tests-01: *online-zenko
  node-tests-02: *online-zenko

  test-latest-zenko:
    worker: *kube_cluster
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - ShellCommand:
        name: Setup latest Zenko and run end to end tests
        command: make -e VERBOSE=1 test-latest
        workdir: build/tests
        env:
          BACKBEAT_BRANCH: development/8.0
          CLOUDSERVER_BRANCH: development/8.0
          HELM_NAMESPACE: '%(prop:bootstrap)s-latest-1-0'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-latest-1-0'
          <<: *global_env
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *k8s_cleanup

  cosbench-latest:
    worker: *kube_cluster
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - ShellCommand:
        name: Setup and run benchmarks
        command: make -e test-cosbench
        workdir: build/tests
        maxTime: 43200
        env:
          <<: *global_env
          KUBECONFIG: /root/.kube/config
          ZENKO_HELM_RELEASE: 'zenko-offline'
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          INSTALL_TIMEOUT: "600"
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *k8s_cleanup

  testrail-upload:
    worker:
      type: kube_pod
      path: eve/workers/testrail/pod.yaml
      images:
        testrail: eve/workers/testrail
    steps:
      - ShellCommand:
          name: setup testrail cli
          command: |-
            git clone --branch 1.0.0_alpha1 git@bitbucket.org:scality/test_tools.git .
            pip install -r testrail/requirements.txt
          warnOnFailure: true
          flunkOnFailure: false

      - ShellCommand:
          name: upload reports
          command: ./testrail.py -r "%(prop:artifacts_private_url)s/junit/" -n "%(prop:bootstrap)s"
          workdir: build/testrail/
          env:
            TESTRAIL_LOGIN: '%(secret:testrail_login)s'
            TESTRAIL_KEY: '%(secret:testrail_key)s'
          warnOnFailure: true
          flunkOnFailure: false
