---
version: "0.2"

branches:
  documentation/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge

models:
  - env: &kind-env
      WORKER_COUNT: '2'
      OPERATOR_REPO: git@github.com:scality/zenko-operator.git
      OPERATOR_IMAGE: '%(prop:OPERATOR_IMAGE_NAME)s:%(prop:OPERATOR_IMAGE_TAG)s'
      KIND_NODE_IMAGE: "kindest/node:v1.17.5@sha256:ab3f9e6ec5ad8840eeb1f76c89bb7948c77bbf76bcebe1a8b59790b8ae9a283a"
      VOLUME_ROOT: /artifacts
      OIDC_REALM: "zenko"
      OIDC_CLIENT_ID: "zenko-ui"
      OIDC_USERNAME: 'zenko-end2end'
      UI_ENDPOINT: 'https://ui.zenko.local'
      OIDC_ENDPOINT: 'https://keycloak.zenko.local'
      OIDC_PASSWORD: 'end2end_password'
      OIDC_FIRST_NAME: 'hello'
      OIDC_LAST_NAME: 'world'
      SHELL_UI_IMAGE: "registry.scality.com/playground/jbwatenberg/shell-ui:2.9-dev"
      SHELL_UI_NAME: "shell-ui"
      VAULT_ENDPOINT: 'https://iam.zenko.local'
  - env: &e2e-env
      E2E_IMAGE_NAME: registry.scality.com/zenko/zenko-e2e
      E2E_IMAGE_TAG: '%(prop:commit_short_revision)s'
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      mode: full
      method: clobber
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &private_registry_login
      name: Private Registry Login
      command: >
        docker login
        -u '%(secret:private_registry_username)s'
        -p '%(secret:private_registry_password)s'
        '%(secret:private_registry_url)s' &&
        docker login
        -u '%(secret:scality_oci_rw_user)s'
        -p '%(secret:scality_oci_rw_password)s'
        registry.scality.com
  - ShellCommand: &wait_docker_daemon
      name: Wait for Docker daemon to be ready
      command: |
        bash -c '
        for i in {1..150}
        do
          docker info &> /dev/null && exit
          sleep 2
        done
        echo "Could not reach Docker daemon from buildbot worker" >&2
        exit 1'
      haltOnFailure: true
  - SetProperties: &set_operator_properties
      properties:
        OPERATOR_IMAGE_NAME: registry.scality.com/sf-eng/zenko-operator
        OPERATOR_IMAGE_TAG: '1.0.0-rc.4'

stages:
  pre-merge:
    simultaneous_builds: 4
    worker:
      type: local
    steps:
    # Checking whether the content of the branch is only documentation related.
    # This will help in deciding whether the end2end tests
    # are going to be executed or not.
    - Git: *git_pull
    - EvePropertyFromCommand:
        name: Check if documentation related content
        property: launch_end2end
        command: eve/scripts/launch-end2end.sh
    - TriggerStages:
        name: trigger iso and documentation build
        haltOnFailure: true
        stage_names:
        - build-doc
        - build-iso
        - build-base-iso
    - TriggerStages:
        name: Launch end2end tests
        haltOnFailure: true
        doStepIf: '%(prop:launch_end2end)s'
        stage_names:
        - end2end
    - ShellCommand:
        name: add successful .final_status to artifacts
        command: >
            mkdir build_status
            && echo -n "SUCCESSFUL" > build_status/.final_status
        haltOnFailure: True
    - ShellCommand:
        name: add failed .final_status to artifacts if needed
        command: >
            [ -f build_status/.final_status ]
            || ( mkdir build_status && echo -n "FAILED" > build_status/.final_status )
        haltOnFailure: True
        alwaysRun: True
    - Upload:
        source: build_status
        alwaysRun: True

  build-doc:
    worker:
      type: kube_pod
      path: eve/workers/doc-builder.yaml
      images:
        doc-builder:
          context: 'docs'
          dockerfile: docs/Dockerfile
    steps:
    - Git: *git_pull
    - EveProperty:
        name: Setup documentation builddir
        property: documentation_builddir
        value: "%(prop:builddir)s/build/artifacts/documentation"
    - ShellCommand:
        name: 'Build doc'
        haltOnFailure: true
        command: |-
          tox --workdir /tmp/tox -e docs -- html BUILDDIR="%(prop:documentation_builddir)s"
        workdir: build/docs
    - ShellCommand:
        name: Create tar file for documentation
        command: >-
          tar --create --gzip
          --directory %(prop:documentation_builddir)s
          --file %(prop:documentation_builddir)s/zenko-documentation.tar.gz
          doctrees html
    - Upload:
        name: Upload documentation
        source: 'artifacts'
        urls:
          - "documentation/html/index.html"
          - "documentation/*.tar.gz"

  build-iso:
    worker: &build-iso-worker
      type: kube_pod
      path: eve/workers/build-iso/pod.yaml
      images:
        build-iso: eve/workers/build-iso
    steps:
    - Git: *git_pull
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand:
        name: 'Build ISO'
        haltOnFailure: true
        workdir: build/solution
        command: ./build.sh
        env:
          DOCKER_SOCKET: 'http://localhost:2375'
    - Upload:
        name: Upload ISO
        source: 'solution/_build'
        urls:
          - "*.iso"

  build-base-iso:
    worker: *build-iso-worker
    steps:
    - Git: *git_pull
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand:
        name: 'Build ISO'
        haltOnFailure: true
        workdir: build/solution-base
        command: ./build.sh
        env:
          DOCKER_SOCKET: 'http://localhost:2375'
    - Upload:
        name: Upload ISO
        source: 'solution-base/_build'
        urls:
          - "*.iso"

  end2end:
    worker:
      type: kube_pod
      path: eve/workers/end2end.yaml
      images:
        worker: eve/workers/end2end
    steps:
    - Git: *git_pull
    - SetProperties: *set_operator_properties
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand: &bootstrap_kind
        name: Bootstrap kind cluster
        env:
          <<: *kind-env
        command: bash scripts/bootstrap-kind.sh ${KIND_NODE_IMAGE} ${VOLUME_ROOT} ${WORKER_COUNT}
        workdir: build/eve/workers/end2end
    - ShellCommand:
        name: Ensure cluster is up and running
        command: |
          kubectl get nodes
          kubectl get pods --all-namespaces
    - ShellCommand: &create_image_pull_secret
        name: Create pull image secret
        command: bash scripts/create-pull-image-secret.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: True
    - ShellCommand:
        name: Install kind cluster dependencies
        env:
          <<: *kind-env
        command: bash scripts/install-kind-dependencies.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
        flunkOnFailure: true
    - ShellCommand:
        name: Patch CoreDNS config
        env:
          <<: *kind-env
        command: bash scripts/patch-coredns.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand:
        name: Setup Shell-UI Service
        env:
          <<: *kind-env
        command: bash scripts/deploy-shell-ui.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand:
        name: Setup Keycloak Realm/Client
        env:
          <<: *kind-env
        command: bash scripts/keycloak-helper.sh setup-realm default
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand:
        name: Install test cluster
        env:
          <<: *kind-env
          COMMIT_HASH: '%(prop:OPERATOR_IMAGE_TAG)s'
        command: |
          docker pull ${OPERATOR_IMAGE}
          kind load docker-image ${OPERATOR_IMAGE}
          git clone ${OPERATOR_REPO} operator
          cd operator
          git checkout ${COMMIT_HASH}
          bash deploy/scripts/install-zenko-operator.sh "${OPERATOR_IMAGE}" default
        workdir: build/eve/workers/end2end
        haltOnFailure: true
        flunkOnFailure: true
    - ShellCommand:
        name: Deploy Zenko Instance
        env:
          <<: *kind-env
        command: bash eve/workers/end2end/scripts/deploy-zenko.sh end2end default
        workdir: build
        haltOnFailure: true
    - ShellCommand:
        name: Add Keycloak user
        env:
          <<: *kind-env
        command: bash scripts/keycloak-helper.sh add-user default
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &build-e2e-image
        name: Build end2end test image
        env: *e2e-env
        command: |
          docker build -t ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} tests/zenko_tests
          docker push ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG}
        workdir: build
        haltOnFailure: true
    - ShellCommand:
        name: End-to-end configuration
        env:
          <<: [*kind-env, *e2e-env]
        command: bash scripts/configure-e2e.sh "end2end" ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} "default"
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand:
        name: Run init CI test
        env:
          <<: [*kind-env, *e2e-env]
        command: bash scripts/run-e2e-test.sh "end2end" ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} ${STAGE} "default"
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand:
        name: Run smoke tests
        env:
          <<: [*kind-env, *e2e-env]
        command: bash scripts/run-e2e-test.sh "smoke" ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} "smoke" "default"
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand:
        name: archive artifact logs and data
        command: >-
          set -exu;
          mkdir -p /artifacts/data/kind-logs;
          kubectl get pods -A -o yaml > /artifacts/data/kind-logs/all-pods.log;
          kubectl get events -A -o yaml > /artifacts/data/kind-logs/all-events.log;
          kind export logs /artifacts/data/kind-logs/kind-export;
          tar zcvf /artifacts/%(prop:commit_short_revision)s-logs-volumes.tgz /artifacts/data/kind-logs;
        alwaysRun: true
    - ShellCommand:
        name: Clean Up
        command: kind delete cluster
    - Upload:
        alwaysRun: true
        source: /artifacts
        urls:
          - "*.tgz"
