---
version: "0.2"

branches:
  documentation/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, user/*:
    stage: pre-merge

models:
  - env: &kind-env
      WORKER_COUNT: '2'
      OPERATOR_REPO: git@github.com:scality/zenko-operator.git
      OPERATOR_IMAGE: '%(prop:OPERATOR_IMAGE_NAME)s:%(prop:OPERATOR_IMAGE_TAG)s'
      KIND_NODE_IMAGE: "kindest/node:v1.22.4@sha256:ca3587e6e545a96c07bf82e2c46503d9ef86fc704f44c17577fca7bcabf5f978"
      VOLUME_ROOT: /artifacts
      OIDC_REALM: "zenko"
      OIDC_CLIENT_ID: "zenko-ui"
      OIDC_USERNAME: 'zenko-end2end'
      OIDC_PASSWORD: '123'
      OIDC_FIRST_NAME: 'hello'
      OIDC_LAST_NAME: 'world'
      SHELL_UI_NAME: "shell-ui"
      SHELL_UI_IMAGE: "registry.scality.com/sf-eng/shell-ui:2.9-dev"
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      http_proxy: ""
      https_proxy: ""
  - env: &http-env
      UI_ENDPOINT: 'http://ui.zenko.local'
      OIDC_ENDPOINT: 'http://keycloak.zenko.local'
      NAVBAR_ENDPOINT: 'http://shell-ui.zenko.local'
      ENABLE_KEYCLOAK_HTTPS: 'false'
  - env: &https-env
      UI_ENDPOINT: 'https://ui.zenko.local'
      OIDC_ENDPOINT: 'https://keycloak.zenko.local'
      NAVBAR_ENDPOINT: 'https://shell-ui.zenko.local'
      ENABLE_KEYCLOAK_HTTPS: 'true'
  - env: &e2e-env
      E2E_IMAGE_NAME: registry.scality.com/zenko/zenko-e2e
      E2E_IMAGE_TAG: '%(prop:commit_short_revision)s'
      VAULT_TEST_IMAGE_NAME: '%(prop:vault_test_image_name)s'
      VAULT_TEST_IMAGE_TAG: '%(prop:vault_test_image_tag)s'
  - env: &secrets-env
      AWS_BACKEND_SOURCE_LOCATION: awsbackend
      AWS_BACKEND_DESTINATION_LOCATION: awsbackendmismatch
      GCP_BACKEND_DESTINATION_LOCATION: gcpbackendmismatch
      AZURE_BACKEND_DESTINATION_LOCATION: azurebackendmismatch
      LOCATION_QUOTA_BACKEND: quotabackend
      AWS_BUCKET_NAME: ci-zenko-aws-target-bucket
      AWS_CRR_BUCKET_NAME: ci-zenko-aws-crr-target-bucket
      AZURE_CRR_BUCKET_NAME: ci-zenko-azure-crr-target-bucket
      GCP_CRR_BUCKET_NAME: ci-zenko-gcp-crr-target-bucket
      GCP_CRR_MPU_BUCKET_NAME: ci-zenko-gcp-crr-mpu-bucket
      GCP_ACCESS_KEY: '%(secret:aws_gcp_backend_access_key)s'
      GCP_SECRET_KEY: '%(secret:aws_gcp_backend_secret_key)s'
      GCP_BACKEND_SERVICE_KEY: '%(secret:gcp_backend_service_key)s'
      GCP_BACKEND_SERVICE_EMAIL: '%(secret:gcp_backend_service_email)s'
      RING_S3C_ACCESS_KEY: '%(secret:ring_s3c_backend_access_key)s'
      RING_S3C_SECRET_KEY: '%(secret:ring_s3c_backend_secret_key)s'
      RING_S3C_ENDPOINT: '%(secret:ring_s3c_backend_endpoint)s'
      RING_S3C_BACKEND_SOURCE_LOCATION: rings3cbackendingestion
      RING_S3C_INGESTION_SRC_BUCKET_NAME: 'ingestion-test-src-bucket-%(prop:bootstrap)s'
  - env: &mock-env
      AZURE_ACCOUNT_NAME: devstoreaccount1
      AZURE_BACKEND_ENDPOINT: http://azure-mock/devstoreaccount1
      AZURE_SECRET_KEY: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
      AWS_ENDPOINT: http://aws-mock.zenko.local
      AWS_ACCESS_KEY: accessKey1
      AWS_SECRET_KEY: verySecretKey1
      VERIFY_CERTIFICATES: "false"
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      mode: full
      method: clobber
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &private_registry_login
      name: Private Registry Login
      command: >
        docker login
        -u '%(secret:private_registry_username)s'
        -p '%(secret:private_registry_password)s'
        '%(secret:private_registry_url)s' &&
        docker login
        -u '%(secret:scality_oci_rw_user)s'
        -p '%(secret:scality_oci_rw_password)s'
        registry.scality.com &&
        docker login
        -u '%(secret:dockerhub_login)s'
        -p '%(secret:dockerhub_password)s'
  - ShellCommand: &wait_docker_daemon
      name: Wait for Docker daemon to be ready
      command: |
        bash -c '
        for i in {1..150}
        do
          docker info &> /dev/null && exit
          sleep 2
        done
        echo "Could not reach Docker daemon from buildbot worker" >&2
        exit 1'
      haltOnFailure: true
  - SetPropertyFromCommand: &set_operator_image_name
      name: Set operator image name
      property: OPERATOR_IMAGE_NAME
      command: yq eval '."zenko-operator" | .sourceRegistry + "/" + .image' solution/deps.yaml
  - SetPropertyFromCommand: &set_operator_image_tag
      name: Set operator image name
      property: OPERATOR_IMAGE_TAG
      command: yq eval '."zenko-operator".tag' solution/deps.yaml
  - ShellCommand: &ssh_access
      # Connect with ssh eve@ip
      name: setup team ssh credentials
      command: |
        mkdir -p ~/.ssh
        echo '%(secret:team_ssh_pub_keys)s' >> ~/.ssh/authorized_keys
        ip a

stages:
  pre-merge:
    simultaneous_builds: 4
    worker:
      type: local
    steps:
    # Checking whether the content of the branch is only documentation related.
    # This will help in deciding whether the end2end tests
    # are going to be executed or not.
    - Git: *git_pull
    - EvePropertyFromCommand:
        name: Check if documentation related content
        property: launch_end2end
        command: eve/scripts/launch-end2end.sh
    - TriggerStages:
        name: trigger iso and documentation build
        haltOnFailure: true
        stage_names:
        - build-test-image
    - TriggerStages:
        name: Launch end2end tests
        haltOnFailure: true
        doStepIf: '%(prop:launch_end2end)s'
        stage_names:
        - end2end-http
    - ShellCommand:
        name: add successful .final_status to artifacts
        command: >
            mkdir build_status
            && echo -n "SUCCESSFUL" > build_status/.final_status
        haltOnFailure: True
    - ShellCommand:
        name: add failed .final_status to artifacts if needed
        command: >
            [ -f build_status/.final_status ]
            || ( mkdir build_status && echo -n "FAILED" > build_status/.final_status )
        haltOnFailure: True
        alwaysRun: True
    - Upload:
        source: build_status
        alwaysRun: True

  build-doc:
    worker:
      type: kube_pod
      path: eve/workers/doc-builder.yaml
      images:
        doc-builder:
          context: 'docs'
          dockerfile: docs/Dockerfile
    steps:
    - Git: *git_pull
    - EveProperty:
        name: Setup documentation builddir
        property: documentation_builddir
        value: "%(prop:builddir)s/build/artifacts/documentation"
    - ShellCommand:
        name: 'Build doc'
        haltOnFailure: true
        command: |-
          tox --workdir /tmp/tox -e docs -- html BUILDDIR="%(prop:documentation_builddir)s"
        workdir: build/docs
    - ShellCommand:
        name: Create tar file for documentation
        command: >-
          tar --create --gzip
          --directory %(prop:documentation_builddir)s
          --file %(prop:documentation_builddir)s/zenko-documentation.tar.gz
          doctrees html
    - Upload:
        name: Upload documentation
        source: 'artifacts'
        urls:
          - "documentation/html/index.html"
          - "documentation/*.tar.gz"

  build-iso:
    worker: &build-iso-worker
      type: kube_pod
      path: eve/workers/build-iso/pod.yaml
      images:
        build-iso: eve/workers/build-iso
    steps:
    - Git: *git_pull
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand:
        name: 'Build ISO'
        haltOnFailure: true
        workdir: build/solution
        command: ./build.sh
        env:
          DOCKER_SOCKET: 'http://localhost:2375'
    - Upload:
        name: Upload ISO
        source: 'solution/_build'
        urls:
          - "*.iso"

  build-base-iso:
    worker: *build-iso-worker
    steps:
    - Git: *git_pull
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand:
        name: 'Build ISO'
        haltOnFailure: true
        workdir: build/solution-base
        command: ./build.sh
        env:
          DOCKER_SOCKET: 'http://localhost:2375'
    - Upload:
        name: Upload ISO
        source: 'solution-base/_build'
        urls:
          - "*.iso"

  build-test-image:
    worker: &end2end-worker
      type: openstack
      image: focal-server-cloudimg-amd64_2021-04-29
      flavor: m1.xlarge
      path: eve/workers/end2end
    steps:
    - Git: *git_pull
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand:
        name: Generate end2end config yaml
        env:
          <<: [*kind-env, *e2e-env, *http-env, *mock-env, *secrets-env]
        workdir: build/tests/zenko_tests
        command: |
          envsubst < 'e2e-config.yaml.template' > 'e2e-config.yaml'
          cat e2e-config.yaml
          echo 'Generated e2e-config.yaml file'
        haltOnFailure: true
    - ShellCommand: &build-e2e-image
        name: Build end2end test image
        env: *e2e-env
        command: |
          docker build -t ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} tests/zenko_tests
          docker push ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG}
        workdir: build
        haltOnFailure: true

  end2end-http:
    worker: *end2end-worker
    steps:
    - Git: *git_pull
    - SetPropertyFromCommand: *set_operator_image_name
    - SetPropertyFromCommand: *set_operator_image_tag
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand: *ssh_access
    - ShellCommand: &bootstrap_kind
        name: Bootstrap kind cluster
        env:
          <<: *kind-env
        command: bash scripts/bootstrap-kind.sh ${KIND_NODE_IMAGE} ${VOLUME_ROOT} ${WORKER_COUNT}
        workdir: build/eve/workers/end2end
    - ShellCommand: &ensure_cluter_running
        name: Ensure cluster is up and running
        command: |
          kubectl get nodes
          kubectl get pods --all-namespaces
    - ShellCommand: &create_image_pull_secret
        name: Create pull image secret
        command: bash scripts/create-pull-image-secret.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: True
    - ShellCommand: &install_kind_dependencies
        name: Install kind cluster dependencies
        env:
          <<: [*kind-env, *http-env]
        command: bash scripts/install-kind-dependencies.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
        flunkOnFailure: true
    - ShellCommand: &patch_coredns
        name: Patch CoreDNS config
        env:
          <<: *kind-env
        command: bash scripts/patch-coredns.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &install_shell_ui
        name: Setup Shell-UI Service
        env:
          <<: *kind-env
        command: bash scripts/deploy-shell-ui.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &setup_keycloak
        name: Setup Keycloak Realm/Client
        env:
          <<: [*kind-env, *http-env]
        command: bash scripts/keycloak-helper.sh setup-realm default
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &install_operator
        name: Install operator
        env:
          <<: *kind-env
          COMMIT_HASH: '%(prop:OPERATOR_IMAGE_TAG)s'
        command: |
          docker pull ${OPERATOR_IMAGE}
          kind load docker-image ${OPERATOR_IMAGE}
          git clone ${OPERATOR_REPO} operator
          cd operator
          git checkout ${COMMIT_HASH}
          tilt ci
        workdir: build/eve/workers/end2end
        haltOnFailure: true
        flunkOnFailure: true
    - ShellCommand: &deploy_zenko
        name: Deploy Zenko Instance
        env:
          <<: [*kind-env, *http-env]
        command: bash eve/workers/end2end/scripts/deploy-zenko.sh end2end default
        workdir: build
        haltOnFailure: true
    - ShellCommand: &setup_keycloak_user
        name: Add Keycloak user
        env:
          <<: [*kind-env, *http-env]
        command: bash scripts/keycloak-helper.sh add-user default
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &install_mocks
        name: Start external service mocks
        env:
          <<: [*kind-env, *e2e-env, *http-env]
        command: bash scripts/install-mocks.sh "default"
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &configure_end2end_tests
        name: End-to-end configuration
        env:
          <<: [*kind-env, *e2e-env, *http-env, *secrets-env]
        command: bash scripts/configure-e2e.sh "end2end" ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} "default"
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &run_iam_policies_test
        name: Run iam policies tests
        env:
          <<: [*kind-env, *e2e-env, *http-env, *secrets-env]
        command: bash scripts/run-e2e-test.sh "end2end" ${E2E_IMAGE_NAME}:${E2E_IMAGE_TAG} "iam-policies" "default"
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: &debug_wait
        alwaysRun: true
        command: >-
          if [ $ENABLE_DEBUG = 'true' ]; then
            while true; do sleep 10; echo sleep; done
          fi
        env:
          ENABLE_DEBUG: '%(prop:enable_debug)s'
    - ShellCommand: &archive_artifacts
        name: archive artifact logs and data
        command: >-
          set -exu;
          mkdir -p /tmp/artifacts/data/kind-logs;
          kubectl get pods -A -o yaml > /tmp/artifacts/data/kind-logs/all-pods.log;
          kubectl get events -A -o yaml > /tmp/artifacts/data/kind-logs/all-events.log;
          kind export logs /tmp/artifacts/data/kind-logs/kind-export;
          tar zcvf /tmp/artifacts/%(prop:commit_short_revision)s-${STAGE}-logs-volumes.tgz /tmp/artifacts/data/kind-logs;
        alwaysRun: true
        env:
          STAGE: end2end-http
    - ShellCommand: &kind_cluster_cleanup
        name: Clean Up
        command: kind delete cluster
    - Upload: &upload_artifacts
        alwaysRun: true
        source: /tmp/artifacts
        urls:
          - "*.tgz"

  end2end-https:
    worker: *end2end-worker
    steps:
    - Git: *git_pull
    - SetPropertyFromCommand: *set_operator_image_name
    - SetPropertyFromCommand: *set_operator_image_tag
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand: *ssh_access
    - ShellCommand: *bootstrap_kind
    - ShellCommand: *ensure_cluter_running
    - ShellCommand: *create_image_pull_secret
    - ShellCommand:
        <<: *install_kind_dependencies
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand: *patch_coredns
    - ShellCommand: *install_shell_ui
    - ShellCommand:
        <<: *setup_keycloak
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand: *install_operator
    - ShellCommand:
        <<: *deploy_zenko
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand:
        <<: *setup_keycloak_user
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand:
        <<: *install_mocks
        env:
          <<: [*kind-env, *e2e-env, *http-env]
    - ShellCommand:
        <<: *configure_end2end_tests
        env:
          <<: [*kind-env, *e2e-env, *https-env, *secrets-env]
    - ShellCommand:
        <<: *run_iam_policies_test
        env:
          <<: [*kind-env, *e2e-env, *https-env, *secrets-env]
    - ShellCommand: *debug_wait
    - ShellCommand:
        <<: *archive_artifacts
        env:
          STAGE: end2end-https
    - ShellCommand: *kind_cluster_cleanup
    - Upload: *upload_artifacts

  end2end-vault:
    worker: *end2end-worker
    steps:
    - Git: *git_pull
    - SetPropertyFromCommand: *set_operator_image_name
    - SetPropertyFromCommand: *set_operator_image_tag
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand: *ssh_access
    - ShellCommand: *bootstrap_kind
    - ShellCommand: *ensure_cluter_running
    - ShellCommand: *create_image_pull_secret
    - ShellCommand:
        <<: *install_kind_dependencies
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand: *patch_coredns
    - ShellCommand: *install_shell_ui
    - ShellCommand:
        <<: *setup_keycloak
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand: *install_operator
    - ShellCommand:
        <<: *deploy_zenko
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand:
        <<: *setup_keycloak_user
        env:
          <<: [*kind-env, *https-env]
    - ShellCommand: &run_vault_end2end_test
        name: Run vault end-2end tests
        env:
          <<: [*kind-env, *e2e-env, *https-env]
        command: bash scripts/vault-e2e-test.sh
        workdir: build/eve/workers/end2end
        haltOnFailure: true
    - ShellCommand: *debug_wait
    - ShellCommand:
        <<: *archive_artifacts
        env:
          STAGE: end2end-vault
    - ShellCommand: *kind_cluster_cleanup
    - Upload: *upload_artifacts

  check-dashboard-versions:
    worker: *end2end-worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Verify monitoring dashboard versions
          command: bash monitoring/check_versions.sh
          haltOnFailure: true

  end2end-sharded:
    worker: *end2end-worker
    steps:
    - Git: *git_pull
    - SetPropertyFromCommand: *set_operator_image_name
    - SetPropertyFromCommand: *set_operator_image_tag
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *private_registry_login
    - ShellCommand: *ssh_access
    - ShellCommand: *bootstrap_kind
    - ShellCommand: *ensure_cluter_running
    - ShellCommand: *create_image_pull_secret
    - ShellCommand:
        <<: *install_kind_dependencies
        env:
          <<: [*kind-env, *http-env]
          ZENKO_MONGODB_SHARDED: 'true'
    - ShellCommand: *patch_coredns
    - ShellCommand: *install_shell_ui
    - ShellCommand:
        <<: *setup_keycloak
        env:
          <<: [*kind-env, *http-env]
    - ShellCommand: *install_operator
    - ShellCommand:
        <<: *deploy_zenko
        env:
          <<: [*kind-env, *http-env]
          ZENKO_MONGODB_SHARDED: 'true'
    - ShellCommand:
        <<: *setup_keycloak_user
        env:
          <<: [*kind-env, *http-env]
    - ShellCommand:
        <<: *install_mocks
        env:
          <<: [*kind-env, *e2e-env, *http-env]
    - ShellCommand:
        <<: *configure_end2end_tests
        env:
          <<: [*kind-env, *e2e-env, *http-env, *secrets-env]
    - ShellCommand:
        <<: *run_iam_policies_test
        env:
          <<: [*kind-env, *e2e-env, *http-env, *secrets-env]
    - ShellCommand: *debug_wait
    - ShellCommand:
        <<: *archive_artifacts
        env:
          STAGE: end2end-sharded
    - ShellCommand: *kind_cluster_cleanup
    - Upload: *upload_artifacts
