apiVersion: v1
kind: Service
metadata:
  name: aws-mock
spec:
  selector:
    name: aws-mock
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aws-mock
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 0m
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
spec:
  rules:
  - host: 'aws-mock.zenko.local'
    http:
      paths:
      - backend:
          service:
            name: aws-mock
            port:
              name: http
        path: /
        pathType: Prefix
  - host: '*.aws-mock.zenko.local'
    http:
      paths:
      - backend:
          service:
            name: aws-mock
            port:
              name: http
        path: /
        pathType: Prefix
---
apiVersion: v1
kind: Pod
metadata:
  name: aws-mock-pod
  labels:
    name: aws-mock
    component: mock
spec:
  initContainers:
  - image: zenko/cloudserver:latest
    name: setup
    imagePullPolicy: Always
    command: ["tar", "-xvf", "/static-config/mock-metadata.tar.gz", "-C", "/usr/src/app"]
    volumeMounts:
    - name: configmap
      mountPath: /static-config
    - name: metadata
      mountPath: /usr/src/app/localMetadata
  containers:
  - image: zenko/cloudserver:latest
    name: aws-mock
    ports:
      - containerPort: 80
    env:
    - name: LOG_LEVEL
      value: trace
    - name: REMOTE_MANAGEMENT_DISABLE
      value: "1"
    - name: ENDPOINT
      value: "aws-mock.zenko.local"
    - name: S3BACKEND
      value: file
    ports:
    - name: http
      containerPort: 8000
    volumeMounts:
    - name: metadata
      mountPath: /usr/src/app/localMetadata
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 1
        memory: 2Gi
  volumes:
  - name: metadata
    emptyDir: {}
  - name: configmap
    configMap:
      name: aws-mock
