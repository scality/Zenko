version: "0.2"

branches:
  documentation/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge

models:
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      mode: full
      method: clobber
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &k8s_setup
      name: setup k8s env
      command: eve/scripts/setup-k8s.sh
      haltOnFailure: true
      env:
        CI_KUBECONFIG: '%(secret:openstack_cluster_conf)s'
        NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
        KUBECONFIG: /root/.kube/config
        CLUSTER_IP: '%(secret:openstack_cluster_ip)s'
  - ShellCommand: &k8s_cleanup
      name: Cleanup
      command: |
        kubectl -n ${NAMESPACE} delete cosmos --all
        kubectl delete clusterrolebinding ${NAMESPACE}-cosmos-operator
        kubectl delete namespace ${NAMESPACE} --wait
      alwaysRun: true
      warnOnFailure: true
      sigtermTime: 1200
      env:
        KUBECONFIG: /root/.kube/config
        NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
  - Upload: &upload_artifacts
      source: tests/artifacts
      urls:
        - "*.tar.gz"
  - ShellCommand: &private_registry_login
      name: Private Registry Login
      command: >
        docker login
        -u '%(secret:private_registry_username)s'
        -p '%(secret:private_registry_password)s'
        '%(secret:private_registry_url)s'
  - ShellCommand: &helm_lint
      name: Lint charts
      command: >
        helm lint kubernetes/zenko/ &&
        helm lint kubernetes/zenko/charts/* &&
        helm lint kubernetes/cosmos
      haltOnFailure: true
  - ShellCommand: &dump_logs
      name: Dump zenko logs
      command: make -e dump-logs
      workdir: build/tests
      alwaysRun: true
      warnOnFailure: true
      env:
        HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
  - ShellCommand: &start-mocks
      name: Start external service mocks
      command: make -e install-mocks
      workdir: build/tests
      haltOnFailure: true
      env:
        HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
  - SetPropertyFromCommand: &notify-build-start
      name: Save the timestamp from our start message, for editing later
      property: report_build_msg_ts
      command: python report.py --notify
      workdir: build/tests
      env:
        SLACK_TOKEN: '%(secret:report_slack_auth_token)s'
        BUILD_NAME: '%(prop:report_build_name)s'
        BUILD_NUMBER: '%(prop:bootstrap)s'
  - ShellCommand: &trigger-build-reporter
      name: Trigger the report-test stage in a seperate build
      command: python report.py --trigger
      workdir: build/tests
      alwaysRun: true
      env:
        SLACK_TOKEN: '%(secret:report_slack_auth_token)s'
        EVE_TOKEN: '%(secret:report_github_auth_token)s'
        BUILD_NAME: '%(prop:report_build_name)s'
        BUILD_NUMBER: '%(prop:bootstrap)s'
        BUILD_STAGE: report-build-end
        BUILD_REPO: zenko
        BUILD_MSG_TS: '%(prop:report_build_msg_ts)s'
        BUILD_BRANCH: '%(prop:branch)s'

  - env: &secrets_env # contains values used for test config
      AWS_ENDPOINT: https://s3.amazonaws.com
      AWS_ACCESS_KEY: '%(secret:aws_s3_backend_access_key)s'
      AWS_SECRET_KEY: '%(secret:aws_s3_backend_secret_key)s'
      AWS_ACCESS_KEY_2: '%(secret:aws_s3_backend_access_key_2)s'
      AWS_SECRET_KEY_2: '%(secret:aws_s3_backend_secret_key_2)s'

      RING_S3C_ACCESS_KEY: '%(secret:ring_s3c_backend_access_key)s'
      RING_S3C_SECRET_KEY: '%(secret:ring_s3c_backend_secret_key)s'
      RING_S3C_ENDPOINT: '%(secret:ring_s3c_backend_endpoint)s'

      GCP_ACCESS_KEY: '%(secret:aws_gcp_backend_access_key)s'
      GCP_SECRET_KEY: '%(secret:aws_gcp_backend_secret_key)s'
      GCP_ACCESS_KEY_2: '%(secret:aws_gcp_backend_access_key_2)s'
      GCP_SECRET_KEY_2: '%(secret:aws_gcp_backend_secret_key_2)s'

      AZURE_ACCOUNT_NAME: '%(secret:azure_backend_account_name)s'
      AZURE_BACKEND_ENDPOINT: '%(secret:azure_backend_endpoint)s'
      AZURE_SECRET_KEY: '%(secret:azure_backend_access_key)s'

      AZURE_ACCOUNT_NAME_2: '%(secret:azure_backend_account_name_2)s'
      AZURE_BACKEND_ENDPOINT_2: '%(secret:azure_backend_endpoint_2)s'
      AZURE_SECRET_KEY_2: '%(secret:azure_backend_access_key_2)s'
      ZENKO_ACCESS_KEY: HEYIMAACCESSKEY
      ZENKO_SECRET_KEY: loOkAtMEImASecRetKEy123=
      AWS_BACKEND_SOURCE_LOCATION: awsbackend
      AWS_BACKEND_DESTINATION_LOCATION: awsbackendmismatch
      GCP_BACKEND_DESTINATION_LOCATION: gcpbackendmismatch
      AZURE_BACKEND_DESTINATION_LOCATION: azurebackendmismatch
      LOCATION_QUOTA_BACKEND: quotabackend
      GCP_BACKEND_SERVICE_KEY: '%(secret:gcp_backend_service_key)s'
      GCP_BACKEND_SERVICE_EMAIL: '%(secret:gcp_backend_service_email)s'
      COSBENCH_NIGHTLY_SERVICE_ACCOUNT: '%(secret:cosbenchNightlyServiceAccount)s'
      COSBENCH_SPREADSHEET_ID: '%(secret:cosbenchSpreadsheetID)s'

      AWS_BUCKET_NAME: ci-zenko-aws-target-bucket
      AWS_BUCKET_NAME_2: ci-zenko-aws-target-bucket-2
      AWS_CRR_BUCKET_NAME: ci-zenko-aws-crr-target-bucket
      AWS_CRR_SRC_BUCKET_NAME: 'ci-zenko-aws-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'

      AZURE_BUCKET_NAME: ci-zenko-azure-target-bucket
      AZURE_BUCKET_NAME_2: ci-zenko-azure-target-bucket-2
      AZURE_CRR_BUCKET_NAME: ci-zenko-azure-crr-target-bucket
      AZURE_CRR_SRC_BUCKET_NAME: 'ci-zenko-azure-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'

      GCP_BUCKET_NAME: ci-zenko-gcp-target-bucket
      GCP_BUCKET_NAME_2: ci-zenko-gcp-target-bucket-2
      GCP_CRR_BUCKET_NAME: ci-zenko-gcp-crr-target-bucket
      GCP_CRR_MPU_BUCKET_NAME: ci-zenko-gcp-crr-mpu-bucket
      GCP_CRR_SRC_BUCKET_NAME: 'ci-zenko-gcp-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'
      GCP_MPU_BUCKET_NAME: ci-zenko-gcp-mpu-bucket
      GCP_MPU_BUCKET_NAME_2: ci-zenko-gcp-mpu-bucket-2

      CEPH_BUCKET_NAME: ci-zenko-ceph-target-bucket
      CEPH_CRR_SRC_BUCKET_NAME: 'ci-zenko-ceph-crr-src-bucket-${STAGE}-%(prop:bootstrap)s'
      CEPH_CRR_BUCKET_NAME: ci-zenko-ceph-crr-target-bucket

      RING_S3C_BACKEND_SOURCE_LOCATION: rings3cbackendingestion
      RING_S3C_INGESTION_SRC_BUCKET_NAME: 'ingestion-${STAGE}-%(prop:bootstrap)s'

      MULTI_CRR_SRC_BUCKET_NAME: 'ci-zenko-multi-crr-src-bucket-%(prop:bootstrap)s-${STAGE}'
      TRANSIENT_SRC_BUCKET_NAME: 'ci-zenko-transient-src-bucket-%(prop:bootstrap)s-${STAGE}'

      NFS_SERVER: '%(secret:nfs_backend_endpoint)s'
      NFS_BACKEND: 'nfs-%(prop:bootstrap)s-%(prop:buildnumber)s'
      NFS_BUCKET_NAME: 'zenko-nfs-bucket'

  - env: &mock_env
      AZURE_ACCOUNT_NAME: devstoreaccount1
      AZURE_BACKEND_ENDPOINT: http://azure-mock/devstoreaccount1
      AZURE_SECRET_KEY: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==

      AWS_ENDPOINT: http://aws-mock
      AWS_ACCESS_KEY: accessKey1
      AWS_SECRET_KEY: verySecretKey1
      AWS_ACCESS_KEY_2: accessKey2
      AWS_SECRET_KEY_2: verySecretKey2
      VERIFY_CERTIFICATES: "false"

  - env: &docker_env # contains values for build test images
      E2E_DOCKER_IMAGE_NAME: '%(secret:private_registry_url)s/zenko/zenko-e2e'
      BACKBEAT_DOCKER_IMAGE_NAME: '%(secret:private_registry_url)s/zenko/backbeat-e2e'
      IMAGE_REGISTRY: '%(secret:private_registry_url)s'
      TAG_OVERRIDE: '%(prop:commit_short_revision)s'

  - env: &k8s_env # contains values for running helm and kubectl
      HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
      TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
      INSTALL_TIMEOUT: "600"

  - env: &global_env # contains all env values
      <<: [*secrets_env, *docker_env, *k8s_env]

stages:
  pre-merge:
    simultaneous_builds: 4
    worker:
      type: local
    steps:
    - TriggerStages:
        name: trigger all the tests
        haltOnFailure: true
        stage_names:
        - build-doc
        - test-cosmos
        - python-tests
        - node-tests-01
        - node-tests-02

  build-doc:
    worker:
      type: kube_pod
      path: eve/workers/doc-builder.yaml
      images:
        doc-builder:
          context: 'docs'
          dockerfile: docs/Dockerfile
    steps:
    - Git: *git_pull
    - ShellCommand:
        name: 'Build doc'
        haltOnFailure: true
        command: |-
          tox --workdir /tmp/tox -e docs -- html BUILDDIR="%(prop:builddir)s/build/artifacts"
          # Building the latex twice to catch up the reference
          tox --workdir /tmp/tox -e docs -- latexpdf BUILDDIR="%(prop:builddir)s/build/artifacts"
          tox --workdir /tmp/tox -e docs -- latexpdf BUILDDIR="%(prop:builddir)s/build/artifacts"
        workdir: build/docs

    - Upload:
        name: Upload documentation
        source: 'artifacts'
        urls:
          - "html/index.html"
          - "latex/*.pdf"

  test-cosmos:
    worker:
      type: kube_pod
      path: eve/workers/zenko.yaml
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Validate cosmos chart
          command: helm template kubernetes/cosmos
          workdir: build

  online-zenko: &online-zenko
    worker: &kube_cluster
      type: kube_pod
      path: eve/workers/zenko.yaml
      vars:
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - ShellCommand: *start-mocks
    - ShellCommand:
        name: Setup and run e2e
        command: |
          . ../eve/scripts/only-docs.sh
          make -e VERBOSE=1 test
        workdir: build/tests
        env:
          <<: [*mock_env, *secrets_env, *docker_env]
          KUBECONFIG: /root/.kube/config
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          INSTALL_TIMEOUT: "720"
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *k8s_cleanup

  python-tests: *online-zenko
  node-tests-01: *online-zenko
  node-tests-02: *online-zenko

  test-latest-zenko:
    worker:
      type: local
    steps:
      - Git: *git_pull
      - SetProperty:
          property: report_build_name
          value: 'Nightly-Build'
      - SetPropertyFromCommand: *notify-build-start
      - TriggerStages:
          name: Trigger latest builds
          haltOnFailure: true
          stage_names:
            - test-latest-1-0-x
            - test-latest-1-1-x
      - ShellCommand:
          name: Trigger the report-test stage in a seperate build
          command: python report.py --trigger
          workdir: build/tests
          alwaysRun: true
          env:
            SLACK_TOKEN: '%(secret:report_slack_auth_token)s'
            EVE_TOKEN: '%(secret:report_github_auth_token)s'
            BUILD_NAME: '%(prop:report_build_name)s'
            BUILD_NUMBER: '%(prop:bootstrap)s'
            BUILD_STAGE: report-build-end
            BUILD_REPO: zenko
            BUILD_MSG_TS: '%(prop:report_build_msg_ts)s'
            BUILD_BRANCH: '%(prop:branch)s'
            CROSSPOST_TO_HIPPO: 'true'

  test-latest-1-0-x:
    worker: *kube_cluster
    steps:
      - Git: *git_pull
      - ShellCommand: *private_registry_login
      - ShellCommand: *k8s_setup
      - ShellCommand:
          name: Setup latest Zenko and run end to end tests
          command: make -e VERBOSE=1 test-latest
          workdir: build/tests
          env:
            BACKBEAT_BRANCH: development/8.0
            CLOUDSERVER_BRANCH: development/8.0
            PYTHON_ARGS: "-k 'not ceph'"
            HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
            TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
            <<: *global_env
      - ShellCommand: *dump_logs
      - Upload: *upload_artifacts
      - ShellCommand: *k8s_cleanup

  test-latest-1-1-x:
    worker: *kube_cluster
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - ShellCommand:
        name: Setup latest Zenko and run end to end tests
        command: make -e VERBOSE=1 test-latest
        workdir: build/tests
        env:
          BACKBEAT_BRANCH: development/8.1
          CLOUDSERVER_BRANCH: development/8.1
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          <<: *global_env
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *k8s_cleanup

  cosbench-latest:
    worker: *kube_cluster
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - SetProperty:
        property: report_build_name
        value: 'Nightly-Cosbench'
    - SetPropertyFromCommand: *notify-build-start
    - ShellCommand:
        name: Setup and run benchmarks
        command: make -e test-cosbench
        workdir: build/tests
        maxTime: 43200
        env:
          <<: *global_env
          KUBECONFIG: /root/.kube/config
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          INSTALL_TIMEOUT: "720"
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *trigger-build-reporter
    - ShellCommand: *k8s_cleanup

  fuzz-listing:
    worker: *kube_cluster
    steps:
    - Git: *git_pull
    - ShellCommand: *private_registry_login
    - ShellCommand: *k8s_setup
    - SetProperty:
        property: report_build_name
        value: 'Nightly-Listing-Fuzzer'
    - SetPropertyFromCommand: *notify-build-start
    - ShellCommand:
        name: Setup Zenko and run versioned bucket test
        command: make -e VERBOSE=1 test-listing
        workdir: build/tests
        maxTime: 43200
        timeout: 43200
        env:
          <<: *global_env
          VERSIONED: enabled
          S3FUZZ_ZENKO_BUCKET: fuzzbucket-ver
          S3FUZZ_AWS_BUCKET: ci-zenko-s3-fuzzer-versioned
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
    - ShellCommand:
        name: Run unversioned bucket test
        command: make -e VERBOSE=1 run-listing-fuzzer
        workdir: build/tests
        maxTime: 43200
        env:
          <<: *global_env
          S3FUZZ_ZENKO_BUCKET: fuzzbucket-nonver
          S3FUZZ_AWS_BUCKET: ci-zenko-s3-fuzzer
          HELM_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
          TILLER_NAMESPACE: '%(prop:bootstrap)s-${STAGE}'
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts
    - ShellCommand: *k8s_cleanup
    - ShellCommand: *trigger-build-reporter

  report-build-end:
    worker:
      type: local
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: 'Send a Slack notification to #sf-devops'
          command: python report.py --report
          workdir: build/tests
          env:
            SLACK_TOKEN: '%(secret:report_slack_auth_token)s'
            EVE_TOKEN: '%(secret:report_github_auth_token)s'
            BUILD_NAME: '%(prop:report_build_name)s'
            BUILD_NUMBER: '%(prop:report_build_number)s'
            BUILD_MSG_TS: '%(prop:report_build_msg_ts)s'
            BUILD_REPO: zenko
            CROSSPOST_TO_HIPPO: '%(prop:crosspost-to-hippo)s'
