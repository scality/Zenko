version: "0.2"

branches:
  feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: "pre-merge"

models:
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      mode: full
      method: clobber
      retryFetch: true
      haltOnFailure: true
  - Upload: &upload_artifacts
      source: tests/artifacts
      urls:
        - "*"
  - ShellCommand: &private_registry_login
      name: Private Registry Login
      command: >
        docker login
        -u '%(secret:private_registry_username)s'
        -p '%(secret:private_registry_password)s'
        '%(secret:private_registry_url)s'
  - ShellCommand: &helm_lint
      name: Lint charts
      command: >
        helm lint kubernetes/zenko/ &&
        helm lint kubernetes/zenko/charts/*
      haltOnFailure: true
  - ShellCommand: &dump_logs
      name: Dump zenko logs
      command: make -e dump-logs
      workdir: build/tests
      env:
        HELM_NAMESPACE: '%(prop:testNamespace)s'
  - env: &secrets_env # contains values used for test config
      AWS_GCP_BACKEND_ACCESS_KEY: '%(secret:aws_gcp_backend_access_key)s'
      AWS_GCP_BACKEND_ACCESS_KEY_2: '%(secret:aws_gcp_backend_access_key_2)s'
      AWS_GCP_BACKEND_SECRET_KEY: '%(secret:aws_gcp_backend_secret_key)s'
      AWS_GCP_BACKEND_SECRET_KEY_2: '%(secret:aws_gcp_backend_secret_key_2)s'
      AWS_S3_BACKBEAT_BUCKET_NAME: ci-zenko-aws-crr-target-bucket
      AWS_S3_BACKBEAT_SRC_BUCKET_NAME: ci-zenko-aws-crr-src-bucket
      AWS_S3_BACKEND_ACCESS_KEY: '%(secret:aws_s3_backend_access_key)s'
      AWS_S3_BACKEND_ACCESS_KEY_2: '%(secret:aws_s3_backend_access_key_2)s'
      AWS_S3_BACKEND_SECRET_KEY: '%(secret:aws_s3_backend_secret_key)s'
      AWS_S3_BACKEND_SECRET_KEY_2: '%(secret:aws_s3_backend_secret_key_2)s'
      AWS_S3_BUCKET_NAME: ci-zenko-aws-target-bucket
      AWS_S3_BUCKET_NAME_2: ci-zenko-aws-target-bucket-2
      AZURE_BACKBEAT_CONTAINER_NAME: ci-zenko-azure-crr-target-bucket
      AZURE_BACKBEAT_SRC_CONTAINER_NAME: ci-zenko-azure-crr-src-bucket
      AZURE_BACKEND_ACCESS_KEY: '%(secret:azure_backend_access_key)s'
      AZURE_BACKEND_ACCESS_KEY_2: '%(secret:azure_backend_access_key_2)s'
      AZURE_BACKEND_ACCOUNT_NAME: '%(secret:azure_backend_account_name)s'
      AZURE_BACKEND_ACCOUNT_NAME_2: '%(secret:azure_backend_account_name_2)s'
      AZURE_BACKEND_CONTAINER_NAME: ci-zenko-azure-target-bucket
      AZURE_BACKEND_CONTAINER_NAME_2: ci-zenko-azure-target-bucket-2
      AZURE_BACKEND_ENDPOINT: '%(secret:azure_backend_endpoint)s'
      AZURE_BACKEND_ENDPOINT_2: '%(secret:azure_backend_endpoint_2)s'
      GCP_BUCKET_NAME: ci-zenko-gcp-target-bucket
      GCP_BUCKET_NAME_2: ci-zenko-gcp-target-bucket-2
      GCP_CRR_BUCKET_NAME: ci-zenko-gcp-crr-target-bucket
      GCP_CRR_MPU_BUCKET_NAME: ci-zenko-gcp-crr-mpu-bucket
      GCP_CRR_SRC_BUCKET_NAME: ci-zenko-gcp-crr-src-bucket
      GCP_MPU_BUCKET_NAME: ci-zenko-gcp-mpu-bucket
      GCP_MPU_BUCKET_NAME_2: ci-zenko-gcp-mpu-bucket-2
      MULTI_CRR_SRC_BUCKET: ci-zenko-multi-crr-src-bucket
      TRANSIENT_SRC_BUCKET: ci-zenko-transient-src-bucket
      ZENKO_ACCESS_KEY: HEYIMAACCESSKEY
      ZENKO_SECRET_KEY: loOkAtMEImASecRetKEy123=
      ZENKO_STORAGE_ACCOUNT_ACCESS_KEY: HEYIMAACCESSKEY
      ZENKO_STORAGE_ACCOUNT_SECRET_KEY: loOkAtMEImASecRetKEy123=
      AWS_S3_BACKEND_SOURCE_LOCATION: awsbackend
      AWS_S3_BACKEND_DESTINATION_LOCATION: awsbackendmismatch
      AZURE_BACKEND_DESTINATION_LOCATION: azurebackendmismatch
      GCP_BACKEND_DESTINATION_LOCATION: gcpbackendmismatch
      LOCATION_QUOTA_BACKEND: quotabackend
      GCP_BACKEND_SERVICE_KEY: '%(secret:gcp_backend_service_key)s'
      GCP_BACKEND_SERVICE_EMAIL: '%(secret:gcp_backend_service_email)s'

  - env: &docker_env # contains values for build test images

      E2E_DOCKER_IMAGE_NAME: '%(secret:private_registry_url)s/zenko/zenko-e2e'
      BACKBEAT_DOCKER_IMAGE_NAME: '%(secret:private_registry_url)s/zenko/backbeat-e2e'
      IMAGE_REGISTRY: '%(secret:private_registry_url)s'
      TAG_OVERRIDE: '%(prop:commit_short_revision)s'

  - env: &k8s_env # containes values for running helm and kubectl
      ZENKO_HELM_RELEASE: 'zenko-test'
      ZENKO_K8S_NAMESPACE: '%(prop:testNamespace)s'
      TILLER_NAMESPACE: '%(prop:testNamespace)s'
      HELM_NAMESPACE: '%(prop:testNamespace)s'
      INSTALL_TIMEOUT: "600"

  - env: &global_env # contains all env values
      <<: [*secrets_env, *docker_env, *k8s_env]

stages:
  pre-merge:
    worker: &pod
      type: kube_pod
      path: eve/workers/zenko.yaml
    steps:
    - TriggerStages:
        name: trigger all the tests
        stage_names:
        - test-zenko

  test-zenko:
    worker: &kube_cluster
      <<: *pod
      service:
        requests:
          version: "1.9.6"
        namespaces:
        - "testNamespace"    # <<< the default namespace for that stage
    steps:
      - Git: *git_pull
      - ShellCommand: *private_registry_login
      - ShellCommand:
          name: Setup Zenko and run end to end tests
          command: make -e test
          workdir: build/tests
          env:
            <<: *global_env
      - ShellCommand: *dump_logs
      - Upload: *upload_artifacts

  test-latest-zenko:
    worker: *kube_cluster
    steps:
      - Git: *git_pull
      - ShellCommand: *private_registry_login
      - ShellCommand:
          name: Setup latest Zenko and run end to end tests
          command: make -e test-latest
          workdir: build/tests
          env:
            <<: *global_env
      - ShellCommand: *dump_logs
      - Upload: *upload_artifacts

  cosbench-latest:
    worker: *kube_cluster
    steps:
      - Git: *git_pull
      - ShellCommand: *private_registry_login
      - ShellCommand:
          name: Setup and run benchmarks
          command: make -e test-cosbench
          workdir: build/tests
          maxTime: 43200
          env:
            <<: *global_env
      - ShellCommand: *dump_logs
      - Upload: *upload_artifacts
