# Variables which should be replaced. Similar to grafana dashboards' __inputs section
x-inputs:
  - name: namespace
    type: constant
    value: zenko
  - name: service
    type: constant
    value: data-db-mongodb-sharded # `mongodb` when not sharded
  - name: pvc
    type: constant
    value: datadir-data-db-mongodb # `datadir-mongodb` when not sharded
  - name: tooManyElectionsWarningThreshold
    type: config
    value: 10
  - name: tooManyClientConnectionsWarningThreshold
    type: config
    value: 100
  - name: remainingDiskSpaceWarningThreshold
    type: config
    value: 0.25
  - name: replicas
    type: config
    value: 3

groups:
- name: MongoDb
  rules:

  - alert: MongoDbDegraded
    expr: |
      label_replace(
        sum(up{namespace="${namespace}",pod=~"${service}.*"}) by(job) < ${replicas}
      , "job", "$1", "job", "(?:${namespace}/)?${service}-?(.*)")
    for: 30s
    labels:
      severity: warning
    annotations:
      description: >-
        Less than 100% of MongoDb {{ $labels.job }} instances are up and healthy:
        {{ $value }}/${replicas}.
      summary: MongoDb {{ $labels.job }} service degraded

  - alert: MongoDbCritical
    expr: |
      label_replace(
        sum(up{namespace="${namespace}",pod=~"${service}.*"}) by(job) < ${replicas} / 2
      , "job", "$1", "job", "(?:${namespace}/)?${service}-?(.*)")
    for: 30s
    labels:
      severity: critical
    annotations:
      description: >-
        Less than 50% of MongoDb {{ $labels.job }} instances are up and healthy:
        {{ $value }}/${replicas}.
      summary: MongoDb {{ $labels.job }} service critical

  - alert: NoPrimary
    expr: |
      absent_over_time(mongodb_rs_members_state{namespace="${namespace}",pod=~"${service}.*",member_state="PRIMARY"}[1m]) == 1
    for: 0m
    labels:
      severity: critical
    annotations:
      description: "MongoDb has no PRIMARY."
      summary: MongoDb down

  - alert: UnhealthyMemberWarning
    expr: |
      label_replace(
        group by(member_idx, member_state) (
          mongodb_rs_members_health{namespace="${namespace}",pod=~"${service}.*"} != 1
        )
      , "member_idx", "$1", "member_idx", "(${service}[^.]*)\\.${service}.*")
    for: 30s
    labels:
      severity: warning
    annotations:
      description: "Member {{ $labels.member_idx }} ({{ $labels.member_state }}) is not healthy."
      summary: Unhealthy MongoDb member

  - alert: TooManyElectionsWarning
    expr: |
      label_replace(
        sum(changes(mongodb_rs_members_electionDate{namespace="${namespace}",pod=~"${service}.*"}[10m]))
            by(job) 
          > ${tooManyElectionsWarningThreshold}
      , "job", "$1", "job", "(?:${namespace}/)?${service}-?(.*)")
    for: 0s
    labels:
      severity: warning
    annotations:
      description: >-
        Number of elections in last 10m is greater than ${tooManyElectionsWarningThreshold}
        for `{{ $labels.job }}`.
      summary: Too many elections

  - alert: ReplicationLagWarning
    expr: |
      label_replace(
        max(
            max(mongodb_rs_members_optimeDate{namespace="${namespace}",pod=~"${service}.*",member_state="PRIMARY"})
                by(pod, rs_nm)
            - ignoring(member_idx) group_right
            min(mongodb_rs_members_optimeDate{namespace="${namespace}",pod=~"${service}.*",member_state="SECONDARY"})
                by(pod, rs_nm, member_idx)
        ) by(member_idx, rs_nm) / 1000 > 30
      , "member_idx", "$1", "member_idx", "(${service}[^.]*)\\.${service}.*")
    for: 10m
    labels:
      severity: warning
    annotations:
      description: "Mongodb replication lag for `{{ $labels.member_idx }}` is more than 30 seconds."
      summary: MongoDB replication lag

  - alert: TooManyClientConnectionsWarning
    expr: |
      label_replace(
        sum(mongodb_ss_connections{namespace="${namespace}",pod=~"${service}.*",conn_type="current"})
            by(job)
        > ${tooManyClientConnectionsWarningThreshold}
      , "job", "$1", "job", "(?:${namespace}/)?${service}-?(.*)")
    for: 2m
    labels:
      severity: warning
    annotations:
      description: "Too many client connections on `{{ $labels.job }}`."
      summary: Too many MongoDB client connections

  - alert: RemainingDiskSpaceWarning
    expr: |
      kubelet_volume_stats_available_bytes{namespace="${namespace}",persistentvolumeclaim=~"${pvc}-.*"}
          / kubelet_volume_stats_capacity_bytes{namespace="${namespace}",persistentvolumeclaim=~"${pvc}-.*"}
        < ${remainingDiskSpaceWarningThreshold}
      and
        predict_linear(kubelet_volume_stats_available_bytes{namespace="${namespace}",persistentvolumeclaim=~"${pvc}-.*"}[6h], 4 * 24 * 3600) < 0
    for: 2m
    labels:
      severity: warning
    annotations:
      description: 'MongoDb has low disk space'
      summary: 'MongoDb has low disk space'
  
  - alert: MongoDbPodRecovering
    expr: |
      mongodb_rs_members_state{namespace="${namespace}", pod=~"${service}.*"} == 3
    for: 1h
    labels:
      severity: warning
    annotations:
      description: "MongoDB pod `{{ $labels.pod }}` has been in 'RECOVERING' state for more than 1 hour. This may be expected if the 'Resync a Data Services MongoDB Member' procedure has recently been executed."
      summary: MongoDB is recovering

  - alert: MongoDbPodRecovering
    expr: |
      mongodb_rs_members_state{namespace="${namespace}", pod=~"${service}.*"} == 3
    for: 1d
    labels:
      severity: critical
    annotations:
      description: "MongoDB pod `{{ $labels.pod }}` has been in the 'RECOVERING' state more than 24 hours. The instance may be failing to catch up and recover."
      summary: MongoDB is recovering

  - alert: MongoDbInvalidState
    expr: |
      mongodb_rs_members_state{namespace="${namespace}", pod=~"${service}.*", rs_state=~"6|8|10"} > 0
    for: 5m
    labels:
      severity: critical
    annotations:
      description: "MongoDB pod `{{ $labels.pod }}` is in an invalid state state (`{{ $labels.rs_state }}`)."
      summary: "MongoDB node in an invalid state: 6 (UNKNOWN), 8 (DOWN), 10 (REMOVED)"


  - alert: MongoDbPodStartup2
    expr: |
      mongodb_rs_members_state{namespace="${namespace}", pod=~"${service}.*"} == 5
    for: 1h
    labels:
      severity: warning
    annotations:
      description: "MongoDB pod `{{ $labels.pod }}` has been in the 'STARTUP2' state for more than 1 hour. Please ensure that the instance is running properly."
      summary: MongoDB node in STARTUP2 state for too long

  - alert: MongoDbRSNotSynced
    expr: |
      group by(rs_nm) ( count by(rs_nm, pod) (mongodb_rs_members_state{namespace="${namespace}", pod=~"${service}.*", member_state="SECONDARY"}) != (${replicas} - 1) )
    for: 10m
    labels:
      severity: warning
    annotations:
      description: "MongoDB replica set `{{ $labels.rs_nm }}` is not in the expected state. It does not have the expected number of SECONDARY members. Please ensure that all instances are running properly."
      summary: MongoDB replica set out of sync
