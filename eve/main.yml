version: "0.2"

branches:
  default:
    stage: "pre-merge"

models:
  - Upload: &upload_artifacts
      source: tests/artifacts
      urls:
        - "*"
  - env: &global_env
      ZENKO_HELM_RELEASE: 'zenko-test'
      ZENKO_K8S_NAMESPACE: '%(prop:testNamespace)s'
      TILLER_NAMESPACE: '%(prop:testNamespace)s'
      AWS_S3_BUCKET_NAME: zenko-aws-target-bucket
      AWS_S3_BUCKET_NAME_2: zenko-aws-target-bucket-2
      AWS_S3_BACKBEAT_BUCKET_NAME: zenko-aws-crr-target-bucket
      AWS_S3_BACKBEAT_SRC_BUCKET_NAME: zenko-aws-crr-src-bucket
      AZURE_BACKEND_CONTAINER_NAME: zenko-azure-target-bucket
      AZURE_BACKEND_CONTAINER_NAME_2: zenko-azure-target-bucket-2
      AZURE_BACKBEAT_CONTAINER_NAME: zenko-azure-crr-target-bucket
      AZURE_BACKBEAT_SRC_CONTAINER_NAME: zenko-azure-crr-src-bucket
      GCP_BUCKET_NAME: zenko-gcp-target-bucket
      GCP_MPU_BUCKET_NAME: zenko-gcp-mpu-bucket
      GCP_BUCKET_NAME_2: zenko-gcp-target-bucket-2
      GCP_MPU_BUCKET_NAME_2: zenko-gcp-mpu-bucket-2
      GCP_CRR_BUCKET_NAME: zenko-gcp-crr-target-bucket
      GCP_CRR_SRC_BUCKET_NAME: zenko-gcp-crr-src-bucket
      GCP_CRR_MPU_BUCKET_NAME: zenko-gcp-crr-mpu-bucket
      MULTI_CRR_SRC_BUCKET: zenko-multi-crr-src-bucket
  - ShellCommand: &install_tiller
      name: install helm (tiller into kubernetes)
      command: >-
        helm init --wait
      haltOnFailure: true
      env:
        <<: *global_env
  - ShellCommand: &helm_repos
      name: Install needed helm repos
      command: |-
        helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
      haltOnFailure: true
      env:
        TILLER_NAMESPACE: '%(prop:testNamespace)s'
  - ShellCommandWithSecrets: &start_orbit_simulator
      name: Start orbit simulator
      command: >-
        git clone git@github.com:scality/orbit-simulator.git &&
        helm upgrade ciutil
        --install orbit-simulator/charts/orbit-simulator
        --set simulator.shim.cloudserver_release=$(echo ${ZENKO_HELM_RELEASE})
        --wait $(./ci_env.sh set)
      workdir: build/eve/workers
      haltOnFailure: true
      env:
        <<: *global_env
  - ShellCommand: &helm_build_dep
      name: Retrieve dependency
      command: >-
         helm dep build charts/zenko
      haltOnFailure: true
      env:
        <<: *global_env
  - ShellCommandWithSecrets: &test_zenko
      name: Test zenko
      command: >-
        sleep 90 &&
        make end2end
      workdir: build/tests
      env:
        <<: *global_env
  - ShellCommand: &dump_logs
      name: Dump logs
      command: make dump-logs
      workdir: build/tests
      env:
        <<: *global_env
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      mode: full
      method: clobber
      retryFetch: true
      haltOnFailure: true

stages:
  pre-merge:
    worker: &pod
      type: kube_pod
      path: eve/workers/zenko.yaml
    steps:
    - TriggerStages:
        name: trigger all the tests
        stage_names:
        - helm_test_kube_1.9.6

  helm_test_kube_1.9.6:
    worker: &kube_cluster
      <<: *pod
      service:
        requests:
          version: "1.9.6"
        namespaces:
        - "testNamespace"    # <<< the default namespace for that stage
    steps:
    - ShellCommand: &fix_curl # Workaround, to be removed
        name: Install curl
        command: |-
          apk --update upgrade
          apk --update add curl
    - Git: *git_pull
    - ShellCommand: *install_tiller
    - ShellCommand: *helm_repos
    - ShellCommandWithSecrets: *start_orbit_simulator
    - ShellCommand: *helm_build_dep
    - ShellCommandWithSecrets:
        name: Install Zenko !
        command: >-
          helm upgrade zenko-test --namespace %(prop:testNamespace)s
          --install charts/zenko
          --set ingress.enabled=true
          --set prometheus.rbac.create=false
          --set prometheus.serviceAccounts.alertmanager.create=false
          --set prometheus.serviceAccounts.kubeStateMetrics.create=false
          --set prometheus.serviceAccounts.nodeExporter.create=false
          --set prometheus.serviceAccounts.pushgateway.create=false
          --set prometheus.serviceAccounts.server.create=false
          --set prometheus.serviceAccounts.alertmanager.name=default
          --set prometheus.serviceAccounts.kubeStateMetrics.name=default
          --set prometheus.serviceAccounts.nodeExporter.name=default
          --set prometheus.serviceAccounts.pushgateway.name=default
          --set prometheus.serviceAccounts.server.name=default
          --set zenko-queue.rbac.enabled=false
          --set redis-ha.rbac.create=false
          --set redis-ha.serviceAccount.create=false
          --set redis-ha.serviceAccount.name=default
          --set cloudserver-front.image.pullPolicy=Always
          --set cloudserver-front.ci.enabled=true
          --timeout 700
          --wait $(./eve/workers/ci_env.sh set)
        haltOnFailure: true
        env:
          <<: *global_env
    - ShellCommandWithSecrets: *test_zenko
    - ShellCommand: *dump_logs
    - Upload: *upload_artifacts

  nightly:
    worker: *kube_cluster
    steps:
      - ShellCommand: *fix_curl
      - Git: *git_pull
      - ShellCommand: *install_tiller
      - ShellCommand: *helm_repos
      - ShellCommandWithSecrets: *start_orbit_simulator
      - ShellCommand: *helm_build_dep
      - ShellCommandWithSecrets:
          name: Install Zenko !
          command: >-
            helm upgrade zenko-test --namespace %(prop:testNamespace)s
            --install charts/zenko
            --set prometheus.rbac.create=false
            --set prometheus.serviceAccounts.alertmanager.create=false
            --set prometheus.serviceAccounts.kubeStateMetrics.create=false
            --set prometheus.serviceAccounts.nodeExporter.create=false
            --set prometheus.serviceAccounts.pushgateway.create=false
            --set prometheus.serviceAccounts.server.create=false
            --set prometheus.serviceAccounts.alertmanager.name=default
            --set prometheus.serviceAccounts.kubeStateMetrics.name=default
            --set prometheus.serviceAccounts.nodeExporter.name=default
            --set prometheus.serviceAccounts.pushgateway.name=default
            --set prometheus.serviceAccounts.server.name=default
            --set zenko-queue.rbac.enabled=false
            --set redis-ha.rbac.create=false
            --set redis-ha.serviceAccount.create=false
            --set redis-ha.serviceAccount.name=default
            --set cloudserver-front.image.pullPolicy=Always
            --set cloudserver-front.image.tag=nightly
            --set cloudserver-front.image.repository=%(secret:private_registry_url)s/zenko/cloudserver
            --set backbeat.image.tag=nightly
            --set backbeat.image.repository=%(secret:private_registry_url)s/zenko/backbeat
            --set s3-data.image.tag=nightly
            --set s3-data.image.repository=%(secret:private_registry_url)s/zenko/cloudserver
            --set cloudserver-front.ci.enabled=true
            --timeout 600
            --wait $(./eve/workers/ci_env.sh set)
          haltOnFailure: true
          env:
            <<: *global_env
      - ShellCommandWithSecrets: *test_zenko
      - ShellCommand: *dump_logs
      - Upload: *upload_artifacts
