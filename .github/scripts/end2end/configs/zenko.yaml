---
apiVersion: zenko.io/v1alpha2
kind: Zenko
metadata:
  name: ${ZENKO_NAME}
  ${ZENKO_ANNOTATIONS}
    zenko.io/x-backbeat-oneshard-replicaset: data-db-mongodb-sharded-shard-0
    zenko.io/x-backbeat-oneshard-replicaset-hosts: data-db-mongodb-sharded-shard0-data-0.data-db-mongodb-sharded-headless.default.svc.cluster.local:27017
spec:
  version: ${ZENKO_VERSION_NAME}
  replicas: 1
  initialConfiguration:
    locations:
    - name: us-east-1
      type: location-file-v1
    s3API:
      endpoints:
      - hostname: ${ZENKO_S3_INGRESS}
        locationName: us-east-1
  internalCloudserver:
    enable: true
    logging:
      logLevel: debug
  cloudserver:
    replicas: 2
    logging:
      logLevel: debug
  backbeat:
    triggerExpirationsOneDayEarlierForTesting: ${EXPIRE_ONE_DAY_EARLIER}
    lifecycleConductor:
      cronRule: "${BACKBEAT_LCC_CRON_RULE}"
    lifecycleBucketProcessor:
      triggerTransitionsOneDayEarlierForTesting: ${TRANSITION_ONE_DAY_EARLIER}
    logging:
      logLevel: trace
  mongodb:
    provider: External
    endpoints:
      - ${ZENKO_MONGODB_ENDPOINT}
    userSecretName: ${ZENKO_MONGODB_SECRET_NAME}
    usernameKey: mongodb-username
    passwordKey: mongodb-password
    databaseName: ${ZENKO_MONGODB_DATABASE}
    ${ZENKO_MONGODB_CONFIG}
  redis:
    provider: Zenko
  kafka:
    provider: Managed
    jmxJarPath: /opt/jmx_exporter/jmx_prometheus_javaagent-0.14.0.jar
    persistence:
      volumeClaimTemplate:
        size: 20Gi
        storageClassName: "standard"
  kafkaCleaner:
    interval: 30s
    minPartitionSizeBytes: 0Mi
    minBatchSize: 0
    keepAtLeast: 0
  zookeeper:
    provider: Managed
    persistence:
      volumeClaimTemplate:
        size: 20Gi
        storageClassName: "standard"
  localData:
    persistence:
      volumeClaimTemplate:
        size: 20Gi
        storageClassName: "standard"
  vault:
    replicas: 2
    enable: true
    iamIngress:
      hostname: ${ZENKO_IAM_INGRESS}
    stsIngress:
      hostname: ${ZENKO_STS_INGRESS}
    logging:
      logLevel: debug
  utapi:
    enable: false
  scuba:
    replicas: 1
  management:
    provider: InCluster
    ui:
      ingress:
        hostname: ${ZENKO_UI_INGRESS}
      discovery:
        navbarBundleURL: '${NAVBAR_ENDPOINT}/shell/solution-ui-navbar.1.0.0.js'
    oidc:
      provider: '${OIDC_ENDPOINT}/auth/realms/${OIDC_REALM}'
      uiClientId: ${OIDC_CLIENT_ID}
      vaultClientId: ${OIDC_CLIENT_ID}
    api:
      ingress:
        hostname: ${ZENKO_MANAGEMENT_INGRESS}
      allowFrom:
      - 172.16.0.0/12
      - 10.0.0.0/8
  sorbet:
    enable: true
    configurationOverrides:
      e2e-cold:
        debug: "true"
        command-timeout: "60s"
        pending-job-poll-after-age: "10s"
        pending-job-poll-check-interval: "10s"
  ingress:
    workloadPlaneClass: 'nginx'
    controlPlaneClass: 'nginx'
    ${ZENKO_INGRESS_ANNOTATIONS}
    ${ZENKO_INGRESS_CERTIFICATES}
  registry:
    imagePullSecretNames:
    - zenko-operator-image-pull
  veeamSosApi:
    enable: ${ZENKO_ENABLE_SOSAPI}
